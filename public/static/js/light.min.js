	var SCREEN_WIDTH = window.innerWidth,
			SCREEN_HEIGHT = window.innerHeight,

			mouseX = 0, mouseY = 0,

			windowHalfX = window.innerWidth / 2,
			windowHalfY = window.innerHeight / 2,

			SEPARATION = 200,
			AMOUNTX = 10,
			AMOUNTY = 10,

			camera, scene, renderer;
			if( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {
				window.innerHeight =window.innerHeight/2;
			}

			light_init();
			animate();

			function light_init() {
				container = document.getElementsByClassName("lightball")[0], void 0 === container && (container = $('<div class="lightball" />').get(0), $(cotnainer).insertAfter("#canvasColor")), camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 1e4), camera.position.z = 500, scene = new THREE.Scene, renderer = new THREE.CanvasRenderer({
					alpha: !0
				}), renderer.setPixelRatio(window.devicePixelRatio), renderer.setSize(window.innerWidth, window.innerHeight), container.appendChild(renderer.domElement);
				for (var e = 2 * Math.PI, t = new THREE.SpriteCanvasMaterial({
						color: 0xdba024,
						program: function (t) {
							t.beginPath(), t.arc(0, 0, .5, 0, e, !0), t.fill()
						}
					}), i = 0; 1e3 > i; i++) particle = new THREE.Sprite(t), particle.position.x = 2 * Math.random() - 1, particle.position.y = 2 * Math.random() - 1, particle.position.z = 2 * Math.random() - 1, particle.position.normalize(), particle.position.multiplyScalar(10 * Math.random() + 450), particle.scale.multiplyScalar(2), scene.add(particle);
				for (var i = 0; 300 > i; i++) {
					var r = new THREE.Geometry,
						n = new THREE.Vector3(2 * Math.random() - 1, 2 * Math.random() - 1, 2 * Math.random() - 1);
					n.normalize(), n.multiplyScalar(450), r.vertices.push(n);
					var o = n.clone();
					o.multiplyScalar(.3 * Math.random() + 1), r.vertices.push(o);
					var a = new THREE.Line(r, new THREE.LineBasicMaterial({
						color: 0xdba024,
						opacity: Math.random()
					}));
					scene.add(a)
				}
			}


				// lines

				for (var i = 0; i < 300; i++) {

					var geometry = new THREE.Geometry();

					var vertex = new THREE.Vector3( Math.random() * 2 - 1, Math.random() * 2 - 1, Math.random() * 2 - 1 );
					vertex.normalize();
					vertex.multiplyScalar( 450 );

					geometry.vertices.push( vertex );

					var vertex2 = vertex.clone();
					vertex2.multiplyScalar( Math.random() * 0.3 + 1 );

					geometry.vertices.push( vertex2 );

					var line = new THREE.Line( geometry, new THREE.LineBasicMaterial( { color: 0xdba024, opacity: Math.random() } ) );
					scene.add( line );
				}

				document.addEventListener( 'mousemove', onDocumentMouseMove, false );
				document.addEventListener( 'touchstart', onDocumentTouchStart, false );
				document.addEventListener( 'touchmove', onDocumentTouchMove, false );

				//

				window.addEventListener( 'resize', onWindowResize, false );

	

			function onWindowResize() {

				windowHalfX = window.innerWidth / 2;
				windowHalfY = window.innerHeight / 2;

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );

			}

			//

			function onDocumentMouseMove(event) {

				mouseX = event.clientX - windowHalfX;
				mouseY = event.clientY - windowHalfY;
			}

			function onDocumentTouchStart( event ) {

				if ( event.touches.length > 1 ) {

				//	event.preventDefault();

					mouseX = event.touches[ 0 ].pageX - windowHalfX;
					mouseY = event.touches[ 0 ].pageY - windowHalfY;

				}

			}

			function onDocumentTouchMove( event ) {

				if ( event.touches.length == 1 ) {

					//event.preventDefault();

					mouseX = event.touches[ 0 ].pageX - windowHalfX;
					mouseY = event.touches[ 0 ].pageY - windowHalfY;

				}

			}

			//

			function animate() {

				requestAnimationFrame( animate );

				render();

			}

			function render() {

				camera.position.x += ( mouseX - camera.position.x ) * .1;
				camera.position.y += ( - mouseY + 200 - camera.position.y ) * .1;
				camera.lookAt( scene.position );

				renderer.render( scene, camera );

			}